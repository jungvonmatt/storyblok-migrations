/* eslint-disable @typescript-eslint/no-explicit-any */
import { loadConfig } from "../utils/config";
import pc from "picocolors";
import path from "path";
import fs from "fs";
import storyblokToTypescript from "storyblok-generate-ts";

/**
 * Generates TypeScript type definitions from Storyblok components schema.
 *
 * This function performs the following steps:
 * 1. Loads the Storyblok configuration to get the space ID
 * 2. Locates the components schema file (components.{spaceId}.json)
 * 3. Creates the output directory if it doesn't exist
 * 4. Generates TypeScript types using storyblok-generate-ts
 * 5. Enhances the generated types by:
 *    - Adding SbBlokData extension to component interfaces
 *    - Adding custom type parsers for special fields (colorpicker, seo-metatags)
 *    - Adding proper imports and documentation
 *
 * @throws {Error} If any of the following conditions are met:
 *   - No Storyblok Space ID is found in the configuration
 *   - Components schema file is not found
 *   - Type generation fails
 *
 * @remarks
 * - Requires running 'sb-migrate config' first to set up the Space ID
 * - Requires running 'sb-migrate pull-components' first to generate the schema file
 * - Generated types will be saved to 'storyblok/types/storyblok.gen.d.ts'
 * - Generated types include custom parsers for:
 *   - Color picker fields (storyblok-colorpicker, native-color-picker)
 *   - SEO meta tags fields (seo-metatags)
 */
export async function generateTypes() {
  try {
    const config = await loadConfig();

    if (!config?.spaceId) {
      console.error(
        pc.red(
          "✗ No Storyblok Space ID found. Please run 'sb-migrate config' first.",
        ),
      );
      process.exit(1);
    }

    const schemaFile = path.join(
      process.cwd(),
      `components.${config.spaceId}.json`,
    );
    const outputDir = path.join(process.cwd(), "storyblok", "types");
    const outputFile = path.join(outputDir, "storyblok.gen.d.ts");

    if (!fs.existsSync(schemaFile)) {
      console.error(
        pc.red(
          `✗ Components schema file not found at ${schemaFile}. Please run 'sb-migrate pull-components' first.`,
        ),
      );
      process.exit(1);
    }

    // Ensure output directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    console.log(pc.blue("Generating TypeScript types..."));

    try {
      await storyblokToTypescript({
        componentsJson: JSON.parse(fs.readFileSync(schemaFile, "utf-8")),
        path: outputFile,
        titlePrefix: "Sb",
        titleSuffix: "",
        compilerOptions: {
          unknownAny: false,
          additionalProperties: false,
          bannerComment: `
            /**
             * This type/interface was automatically generated by sb-migrate generate-types.
             * DO NOT MODIFY IT BY HAND. Instead, run sb-migrate pull-components,
             * and then sb-migrate generate-types to regenerate this file.
            */`.trim(),
          unreachableDefinitions: true,
        },
        customTypeParser(key: string, obj: any) {
          const fieldType = obj.field_type;
          switch (fieldType) {
            case "storyblok-colorpicker":
            case "native-color-picker":
              return {
                [key]: {
                  type: "object",
                  properties: {
                    _uid: { type: "string" },
                    color: { type: "string" },
                    plugin: { type: "string" },
                  },
                },
              };
            case "seo-metatags":
              return {
                [key]: {
                  type: "object",
                  properties: {
                    _uid: { type: "string" },
                    title: { type: "string" },
                    plugin: { type: "string" },
                    og_image: { type: "string" },
                    og_title: { type: "string" },
                    description: { type: "string" },
                    twitter_image: { type: "string" },
                    twitter_title: { type: "string" },
                    og_description: { type: "string" },
                    twitter_description: { type: "string" },
                  },
                },
              };
            default:
              return {};
          }
        },
      });

      const fileContent = fs.readFileSync(outputFile, { encoding: "utf8" });

      // Add SbBlokData extension
      const content = fileContent.replace(
        /(export\s+interface\s+\w+)\s+(\{\n(?:\s+.*\n)*\})/g,
        (match, start, end) => {
          if (!end.includes("component:") || !end.includes("_uid:")) {
            return match;
          }
          return `${start} extends SbBlokData ${end}`;
        },
      );

      fs.writeFileSync(
        outputFile,
        `/* eslint-disable */\nimport type { SbBlokData } from '@storyblok/vue'\n${content}`,
        { encoding: "utf8" },
      );

      console.log(pc.green("✓ Successfully generated TypeScript types"));
    } catch (error) {
      console.error(pc.red(`✗ Failed to generate TypeScript types: ${error}`));
      process.exit(1);
    }
  } catch (error) {
    console.error(pc.red(`✗ Failed to generate types: ${error}`));
    process.exit(1);
  }
}
